version: "3.8"

services:
  # === Download Stack ===
  gluetun:
    image: qmcgaw/gluetun:latest
    container_name: vpn
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun:/dev/net/tun
    ports:
      - "${QBIT_PORT:-8080}:8080"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - VPN_SERVICE_PROVIDER=nordvpn
      - VPN_TYPE=wireguard
      - WIREGUARD_PRIVATE_KEY=${WIREGUARD_PRIVATE_KEY}
      - SERVER_COUNTRIES=${NORDVPN_COUNTRY}
      - FIREWALL=on
      - DOT=off
      - LOG_LEVEL=info
      - UPDATER_PERIOD=24h
      - HEALTH_TARGET_ADDRESS=1.1.1.1:443
      - HEALTH_READ_TIMEOUT=2s
      - HEALTH_WAIT_DURATION=10s
    volumes:
      - ${CONFIG_DIR:-./config}/gluetun:/gluetun
    networks:
      - media_net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-qO-", "--dns-timeout=2", "--connect-timeout=2", "https://1.1.1.1/cdn-cgi/trace"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  qbittorrent:
    image: linuxserver/qbittorrent:latest
    container_name: qbittorrent
    network_mode: "service:gluetun"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - WEBUI_PORT=${QBIT_PORT:-8080}
    volumes:
      - ${BASE_PATH}/qbittorrent:/config
      - ${DOWNLOAD_DIR}:/downloads:cached
    restart: unless-stopped
    depends_on:
      - gluetun

  # === Media Management ===
  prowlarr:
    image: linuxserver/prowlarr:latest
    container_name: prowlarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${BASE_PATH}/prowlarr:/config
    ports:
      - "${PROWLARR_PORT:-9696}:9696"
    networks:
      - media_net
    restart: unless-stopped

  sonarr:
    image: linuxserver/sonarr:latest
    container_name: sonarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${BASE_PATH}/sonarr:/config
      - ${MEDIA_SHARE}:/media:cached
      - ${DOWNLOAD_DIR}:/downloads:cached
    ports:
      - "${SONARR_PORT:-8989}:8989"
    networks:
      - media_net
    restart: unless-stopped

  radarr:
    image: linuxserver/radarr:latest
    container_name: radarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${BASE_PATH}/radarr:/config
      - ${MEDIA_SHARE}:/media:cached
      - ${DOWNLOAD_DIR}:/downloads:cached
    ports:
      - "${RADARR_PORT:-7878}:7878"
    networks:
      - media_net
    restart: unless-stopped

  bazarr:
    container_name: bazarr
    image: linuxserver/bazarr:latest
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${BASE_PATH}/bazarr:/config
      - ${MEDIA_SHARE}:/media:cached
    ports:
      - "${BAZARR_PORT:-6767}:6767"
    networks:
      - media_net
    restart: unless-stopped

  # === Media Servers ===
  plex:
    image: linuxserver/plex:latest
    container_name: plex
    network_mode: host
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
      - VERSION=docker
      - PLEX_CLAIM=${PLEX_CLAIM}
      # Add these debugging options
      - NVIDIA_DRIVER_CAPABILITIES=all
      - NVIDIA_VISIBLE_DEVICES=all
      - PLEX_DEBUG=1
      - PLEX_MEDIA_SERVER_USE_SYSLOG=true
    volumes:
      - ${BASE_PATH}/plex/config:/config
      - ${MEDIA_SHARE}/tv:/tv:ro,cached
      - ${MEDIA_SHARE}/movies:/movies:ro,cached
      # Add these device mappings
      - /dev/dri:/dev/dri
    devices:
      - /dev/dri:/dev/dri
    restart: unless-stopped
    privileged: true  # Add this temporarily for debugging

  jellyfin:
    image: jellyfin/jellyfin:latest
    container_name: jellyfin
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      # Add specific Jellyfin environment variables
      - JELLYFIN_CONFIG_DIR=/config/config
      - JELLYFIN_DATA_DIR=/config
      - JELLYFIN_CACHE_DIR=/cache
      - JELLYFIN_LOG_DIR=/config/log
    volumes:
      - ${BASE_PATH}/jellyfin/config:/config
      - ${BASE_PATH}/jellyfin/cache:/cache
      - ${MEDIA_SHARE}/tv:/tv:ro,cached
      - ${MEDIA_SHARE}/movies:/movies:ro,cached
      - ${MEDIA_SHARE}/music:/music:ro,cached
      - ${MEDIA_SHARE}/system:/system:ro,cached
    ports:
      - "${JELLYFIN_PORT:-8096}:8096"
      - "7359:7359/udp"  # Local network discovery
      - "1900:1900/udp"  # DLNA
    networks:
      - media_net
    restart: unless-stopped

  # === Optional Services ===
  flaresolverr:
    image: ghcr.io/flaresolverr/flaresolverr:latest
    container_name: flaresolverr
    environment:
      - LOG_LEVEL=info
      - LOG_HTML=false
      - CAPTCHA_SOLVER=none
      - TZ=${TZ}
    ports:
      - "8191:8191"
    networks:
      - media_net
    restart: unless-stopped

  overseerr:
    image: lscr.io/linuxserver/overseerr:latest
    container_name: overseerr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${BASE_PATH}/overseerr:/config
    ports:
      - "${OVERSEERR_PORT:-5055}:5055"
    networks:
      - media_net
    restart: unless-stopped

  maintainerr:
    image: ghcr.io/jorenn92/maintainerr:latest
    container_name: maintainerr
    user: ${PUID}:${PGID}
    environment:
      - TZ=${TZ}
      - UI_PORT=${MAINTAINERR_PORT:-6246}
      - API_PORT=${MAINTAINERR_API_PORT:-3001}
    volumes:
      - ${BASE_PATH}/maintainerr:/opt/data:rw
    ports:
      - "${MAINTAINERR_PORT:-6246}:6246"
    networks:
      - media_net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:${MAINTAINERR_PORT:-6246}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  recyclarr:
    image: recyclarr/recyclarr:latest
    container_name: recyclarr
    environment:
      - TZ=${TZ}
    volumes:
      - recyclarr_config:/config
    networks:
      - media_net
    restart: unless-stopped

  dashy:
    image: lissy93/dashy:latest
    container_name: dashy
    environment:
      - NODE_ENV=production
      - UID=${PUID}
      - GID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${BASE_PATH}/dashy/conf.yml:/app/public/conf.yml
      - ${BASE_PATH}/dashy/item-icons:/app/public/item-icons  # For custom icons
    ports:
      - "${DASHY_PORT:-4000}:8080"
    networks:
      - media_net
    healthcheck:
      test: ['CMD', 'node', '/app/services/healthcheck']
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # === Monitoring Services ===
  scrutiny:
    container_name: scrutiny
    image: ghcr.io/analogj/scrutiny:master-omnibus
    cap_add:
      - SYS_RAWIO
      - SYS_ADMIN
      - SYS_MODULE
    security_opt:
      - no-new-privileges:true
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - DEBUG=${SCRUTINY_DEBUG:-false}
      - COLLECTOR_LOG_FILE=/opt/scrutiny/log/collector.log
      - COLLECTOR_CRON_SCHEDULE=${SCRUTINY_CRON:-"0 0 * * *"}
      - COLLECTOR_LOW_MEMORY=true
      - SMARTCTL_TIMEOUT=120
      - COLLECTOR_CUSTOM_SMARTCTL=true
    ports:
      - "${SCRUTINY_PORT:-8289}:8080"
      - "${SCRUTINY_INFLUX_PORT:-8086}:8086"
    volumes:
      - /run/udev:/run/udev:ro
      - /sys/module:/sys/module
      - ${CONFIG_DIR}/scrutiny:/opt/scrutiny/config
      - ${CONFIG_DIR}/scrutiny/influxdb:/opt/scrutiny/influxdb
      - ${CONFIG_DIR}/scrutiny/logs:/opt/scrutiny/log
    devices:
      - /dev/sda:/dev/sda
      - /dev/sdb:/dev/sdb
      - /dev/sdc:/dev/sdc
      - /dev/sdd:/dev/sdd
      - /dev/sde:/dev/sde
      - /dev/nvme0:/dev/nvme0
    networks:
      - media_net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  filebrowser:
    image: filebrowser/filebrowser:latest
    container_name: filebrowser
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${BASE_PATH}/filebrowser/database:/database
      - ${BASE_PATH}/filebrowser/config:/config
      - ${FILEBROWSER_ROOT}:/srv/media:ro
      - ${DOWNLOAD_DIR}:/srv/downloads
    ports:
      - "${FILEBROWSER_PORT:-8090}:80"
    networks:
      - media_net
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    command: --database /database/filebrowser.db --config /config/filebrowser.json
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:80"]
      interval: 1m
      timeout: 10s
      retries: 3

  netdata:
    image: netdata/netdata:latest
    container_name: netdata
    pid: host
    network_mode: host
    restart: unless-stopped
    environment:
      - TZ=${TZ}
      - DOCKER_HOST=unix:///var/run/docker.sock
      # Optimize for lower resource usage
      - NETDATA_RUNTIME_MEMORY_MODE=dbengine
      - NETDATA_UPDATE_EVERY=5
      - NETDATA_HISTORY_DAYS=7
      # Focus on media-related metrics
      - NETDATA_MONITORING_DISKS=/dev/sd*,/mnt/showtime
      - NETDATA_MONITORING_SERVICES=plex*,jellyfin*,qbittorrent*,sonarr*,radarr*
    cap_add:
      - SYS_PTRACE
      - SYS_ADMIN
    security_opt:
      - apparmor:unconfined
    volumes:
      - netdataconfig:/etc/netdata
      - netdatalib:/var/lib/netdata
      - netdatacache:/var/cache/netdata
      - /:/host/root:ro,rslave
      - /etc/passwd:/host/etc/passwd:ro
      - /etc/group:/host/etc/group:ro
      - /etc/localtime:/etc/localtime:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /etc/os-release:/host/etc/os-release:ro
      - /var/log:/host/var/log:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # Add mergerfs monitoring
      - /mnt/showtime:/host/mnt/showtime:ro

# === Transcoding Services ===
  tdarr:
    container_name: tdarr
    image: ghcr.io/haveagitgat/tdarr:latest
    restart: unless-stopped
    networks:
      - media_net
    ports:
      - "${TDARR_WEB_PORT:-8265}:8265"  # webUI port
      - "${TDARR_SERVER_PORT:-8266}:8266"  # server port
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
      - serverIP=0.0.0.0
      - serverPort=${TDARR_SERVER_PORT:-8266}
      - webUIPort=${TDARR_WEB_PORT:-8265}
      - internalNode=true
      - inContainer=true
      - ffmpegVersion=6
      - nodeName=kynes-internal
      # QuickSync support
      - NVIDIA_DRIVER_CAPABILITIES=all
      - NVIDIA_VISIBLE_DEVICES=all
    volumes:
      - ${BASE_PATH}/tdarr/server:/app/server
      - ${BASE_PATH}/tdarr/configs:/app/configs
      - ${BASE_PATH}/tdarr/logs:/app/logs
      - ${MEDIA_SHARE}:/media:cached
      - ${BASE_PATH}/tdarr/cache:/temp
    devices:
      - /dev/dri:/dev/dri    # For QuickSync support
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8265"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

volumes:
  recyclarr_config:
  netdataconfig:
  netdatalib:
  netdatacache:

networks:
  media_net:
    driver: bridge
